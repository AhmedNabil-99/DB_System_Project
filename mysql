#!/usr/bin/bash

exist=$(find ./ -name DBS -type d 2>/dev/null)
PS3="mysql >>  "

RED=$(tput setaf 1)
NC=$(tput sgr0)

if [[ -z $exist ]]
then
    mkdir DBS
    cd DBS
else
    cd DBS 
fi

while true
do
select option in "Create Database" "List Databases" "Connect To Databases" "Drop Database" "Exit"
do
    if [[ $option == "List Databases" ]]
    then
        ls ./
        break
    elif [[ $option == "Exit" ]]
    then
        exit 0;
        
    elif [[ $option == "Drop Database" ]]
    then
        read -p "please enter Database you want to drop: " dropped
        if [[ -d $dropped ]]
        then
            rm -rf $dropped
        else
            echo "${RED}$dropped is not existing.${NC}"
        fi
        break
    elif [[ $option == "Create Database" ]]
    then
        read -p "please enter the name of Database: " created
        if [[ -d $created ]]
        then
            echo "$created already exists"
        else
            mkdir $created
        fi
        break
    elif [[ $option == "Connect To Databases" ]]
    then
        read -p "please enter Database you want to connect: " connected
        if [[ -d $connected ]]
        then
            cd $connected
            while true
            do
            select option in "Create Table" "List Tables" "Drop Table" "Insert into Table" "Select From Table" "Delete From Table" "Update Table"
            do
                if [[ $option == "List Tables" ]]
                then
                    ls ./
                    break
                
                elif [[ $option == "Delete From Table" ]]; then
                read -p "Please enter the name of the Table: " table
                if [[ -f $table ]]; then
                    echo "Choose an option for deletion:"
                    select del_option in "Delete Row by Column Value" "Delete Column" "Delete All Content Except Header"; do
                        case $del_option in
                            "Delete Row by Column Value")
                                read -p "Please enter the value to delete: " value
                                awk -v val="$value" 'BEGIN {FS=OFS=":"} $0 !~ val' "$table" > temp && mv temp "$table"
                                echo "Record with value $value deleted."
                                ;;
                            "Delete Column")
                                read -p "Please enter the column name to delete: " column_name
                                col_num=$(head -n 1 "$table" | tr ':' '\n' | nl -v 0 | grep -w "$column_name" | awk '{print $1}')

                                if [[ -z $col_num ]]; then
                                    echo "${RED}Column $column_name does not exist.${NC}"
                                else
                                    awk -v col_num=$((col_num+1)) 'BEGIN {FS=OFS=":"} { $col_num=""; $0=$0; gsub(/::/, ":"); gsub(/^:|:$/, ""); print }' "$table" > temp && mv temp "$table"
                                    echo "Column $column_name deleted."
                                fi
                                ;;
                            "Delete All Content Except Header")
                                head -n 1 "$table" > temp && mv temp "$table"
                                echo "All content except the header has been deleted."
                                ;;
                            *)
                                echo "Invalid option."
                                ;;
                        esac
                        break
                    done
                else
                    echo "${RED}Table $table does not exist.${NC}"
                fi

                elif [[ $option == "Update Table" ]]; then
                    read -p "Please enter the name of the Table: " table
                    if [[ -f $table ]]
                    then
                        columns=$(head -n 1 "$table")
                        pk=$(echo $columns | tr ':' '\n' | grep "PK" | awk '{print $1}')
                        if [[ -z $pk ]]; then
                            echo -e "${RED}No primary key found in table $table. Cannot update without a primary key.${NC}"
                            break
                        fi

                        read -p "Please enter the primary key value of the record you want to update: " pk_value
                        record=$(awk -F: -v pk="$pk" -v pk_value="$pk_value" '$1 == pk_value' "$table")

                        if [[ -z $record ]]; then
                            echo -e "${RED}Record with primary key value $pk_value does not exist.${NC}"
                            break
                        fi

                        IFS=':' read -r -a cols_array <<< "$columns"
                        new_record=""

                        for col in "${!cols_array[@]}"
                        do
                            col_name=$(echo ${cols_array[$col]} | awk '{print $1}')
                            old_value=$(echo $record | cut -d':' -f$((col+1)))
                            read -p "Enter new value for $col_name [current value: $old_value]: " new_value
                            
                            if [[ $col_name == $pk && $new_value != $old_value ]]; then
                                if awk -F: -v pk_value="$new_value" '$1 == pk_value' "$table"; then
                                    echo -e "${RED}Primary key value $new_value already exists in the table. Update failed.${NC}"
                                    continue 4
                                fi
                            fi

                            if [[ -z $new_value ]]; then
                                new_value=$old_value
                            fi

                            new_record+="$new_value:"
                        done
                        
                        new_record=${new_record%:}
                        awk -F: -v pk="$pk" -v pk_value="$pk_value" -v new_record="$new_record" 'BEGIN {OFS=FS} $1 == pk_value {$0 = new_record} 1' "$table" > temp && mv temp "$table"
                        echo "Record with primary key value $pk_value updated."
                    else
                        echo -e "${RED}Table $table does not exist.${NC}"
                    fi
                    break


                elif [[ $option == "Drop Table" ]]
                then
                    read -p "please enter Table you want to drop: " dropped
                    if [[ -f $dropped ]]
                    then
                    rm -rf $dropped
                    echo "Table $dropped has been dropped successfully "
                    else
                    echo "${RED}$dropped is not existing.${NC}"
                    fi
                    break
                elif [[ $option == "Create Table" ]]
                then
                    read -p "please enter the name of Table: " created
                    if [[ -f $created ]]
                    then
                    echo "$created already exists"
                    else
                            touch $created
                            read -p "please enter number of columns: " col_num
                            i=0
                            columns=""
                            column_names=()
                            while [ $i -lt $col_num ]
                            do
                            
                                read -p "please enter column's name: " col_name
                                
                                while [[ " ${column_names[@]} " =~ " ${col_name} " ]]
                                do
                                    echo "${RED}Table name already exists.${NC}"
                                    read -p "please enter column's name: " col_name
                                done
                                column_names+=("$col_name")
                                echo "please enter column constrains"
                                select option in "Primary Key" "not PK"
                                    do
                                        if [[ $option == "Primary Key" ]]
                                        then
                                        col_constrain="PK"
                                        else
                                        col_constrain=NULL
                                        fi
                                        break;
                                    done
                                echo "please enter column data type"
                                select option in "string" "int"
                                do
                                col_type=$option
                                break;
                                done
                                if [[ $i -eq $col_num-1 ]]
                                then
                                columns="$columns$col_name $col_constrain $col_type"
                                else
                                columns+="$col_name $col_constrain $col_type:"
                                fi
                                let i++
                            done
                            echo $columns > $created
                            echo "Table $created created successfully"
                    fi
                    break
                elif [[ $option == "Insert into Table" ]]
                then
                    read -p "please enter the name of the Table: " table
                    if [[ -f $table ]]
                    then
                    columns=$(head -n 1 "$table")
                    pk=$(echo $columns | tr ':' '\n' | grep "PK" | awk '{print $1}')
                    IFS=':' read -r -a cols_array <<< "$columns"
                    values=""
                    pk_value=""
                    for col in "${cols_array[@]}"
                    do
                        col_name=$(echo $col | awk '{print $1}')
                        col_constrain=$(echo $col | awk '{print $2}')
                        col_type=$(echo $col | awk '{print $3}')
                        while true; do
                            read -p "Enter value for $col_name ($col_type): " value
                            
                            if [[ $col_constrain == "PK" && -z $value ]]; then
                                echo "$col_name is a primary key and cannot be null"
                                continue
                            fi
                            
                            if [[ ("${value:0:1}" != "\"" || "${value: -1}" != "\"") && $col_type == "string" && -n $value ]]; then
                                echo "Please enter a valid string!"
                                continue
                            fi
                            
                            if [[ $col_type == "int" && ! $value =~ ^[0-9]+$ && -n $value ]]; then
                                echo "Please enter a valid integer!"
                                continue
                            fi

                            if grep -q -E "^$value:" "$table" && [[ $col_constrain == "PK" ]]
                            then
                                echo "${RED}Primary key must be unique. Please enter another value.${NC}"
                                continue
                            fi
                            break
                        done
                        if [ -z "$values" ]; then
                                values="$value"
                            else
                                values+=":$value"
                            fi
                    done
                    echo "${values% }" >> "$table"
                    echo "Data inserted into $table."
                    else
                        echo "${RED}Table $table does not exist.${NC}"
                    fi
                    break
                elif [[ $option == "Select From Table" ]]
                then
                    while true
                    do
                    select option in "Select All" "Select Column" "Select By Value" "Exit"
					do
                        if [[ $option == "Exit" ]]
                        then
                            continue 2
                        fi

						read -p "please enter the name of the Table: " table
                        echo "--------------------------------------------- "
                        if [[ ! -f $table ]]
                        then
                            echo "${RED}$table table is not existing.${NC}"
                            break
                        fi
                        

						if [[ $option == "Select All" ]]
						then
                            sed -n '1p' $table
                            echo " "
							sed '1d' $table
                            echo "--------------------------------------------- "
                            break
                        elif [[ $option == "Select Column" ]]
                        then
                            read -p "Please enter column name: " column
                            echo "--------------------------------------------- "
                            col_num=$(head -n 1 "$table" | tr ':' '\n' | nl -v 1 | grep -w "$column" | awk '{print $1}')
                            cut -d ":" -f $col_num $table
                            echo "--------------------------------------------- "
                            break
                        elif [[ $option == "Select By Value" ]]
                        then
                            read -p "please enter filtering value: " value
                            echo "--------------------------------------------- "
                            sed -n '1p' $table
                            sed '1d' $table | grep "$value"
                            echo "--------------------------------------------- "
                            break
						fi
					done
                    done
                fi
            done
            done
        else
            echo "${RED}$connected is not existing.${NC}"
        fi
        break
    fi
done
done