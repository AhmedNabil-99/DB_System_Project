#!/usr/bin/bash

exist=$(find ./ -name DBS -type d 2>/dev/null)
PS3="mysql >>  "

if [[ -z $exist ]]
then
	mkdir DBS
	cd DBS
else
	cd DBS 
fi

while true
do
select option in "Create Database" "List Databases" "Connect To Databases" "Drop Database" "Exit"
do
	if [[ $option == "List Databases" ]]
	then
		ls ./
		break
	elif [[ $option == "Exit" ]]
	then
		exit 0;
		
	elif [[ $option == "Drop Database" ]]
	then
		read -p "please enter Database you want to drop: " dropped
		if [[ -d $dropped ]]
		then
			rm -rf $dropped
		else
			echo "$dropped is not existing"
		fi
		break
	elif [[ $option == "Create Database" ]]
	then
		read -p "please enter the name of Database: " created
		if [[ -d $created ]]
		then
			echo "$created already exists"
		else
			mkdir $created
		fi
		break
	elif [[ $option == "Connect To Databases" ]]
	then
		read -p "please enter Database you want to connect: " connected
		if [[ -d $connected ]]
		then
			cd $connected
			while true
			do
			select option in "Create Table" "List Tables" "Drop Table" "Insert into Table" "Select From Table" "Delete From Table" "Update Table"
			do
				if [[ $option == "List Tables" ]]
					then
						ls ./
						break
				elif [[ $option == "Drop Table" ]]
				then
					read -p "please enter Table you want to drop: " dropped
					if [[ -f $dropped ]]
					then
					rm -rf $dropped
					echo "Table $dropped has been dropped successfully "
					else
					echo "$dropped is not existing"
					fi
					break
				elif [[ $option == "Create Table" ]]
					then
					read -p "please enter the name of Table: " created
					if [[ -f $created ]]
					then
					echo "$created already exists"
					else
						touch $created
						read -p "please enter number of columns: " col_num
						i=0
						columns=""
						column_names=()
						while [ $i -lt $col_num ]
						do
						
							read -p "please enter column's name: " col_name
							
							while [[ " ${column_names[@]} " =~ " ${col_name} " ]]
							do
								echo "Table name already exists"
								read -p "please enter column's name: " col_name
							done
							column_names+=("$col_name")
							echo "please enter column constrains"
							select option in "Primary Key" "not PK"
								do
									if [[ $option == "Primary Key" ]]
									then
									col_constrain="PK"
									else
									col_constrain=NULL
									fi
									break;
								done
							echo "please enter column data type"
							select option in "string" "int"
							do
							col_type=$option
							break;
							done
							if [[ $i -eq $col_num-1 ]]
							then
							columns="$columns$col_name $col_constrain $col_type"
							else
							columns+="$col_name $col_constrain $col_type:"
							fi
							let i++
						done
						echo $columns > $created
						echo "Table $created created successfully"
					fi
					break
					elif [[ $option == "Insert into Table" ]]
					then
					    read -p "please enter the name of the Table: " table
					    if [[ -f $table ]]
					    then
						columns=$(head -n 1 "$table")
						pk=$(echo $columns | tr ':' '\n' | grep "PK" | awk '{print $1}')
						IFS=':' read -r -a cols_array <<< "$columns"
						values=""
						pk_value=""
						for col in "${cols_array[@]}"
						do
						    col_name=$(echo $col | awk '{print $1}')
						    col_constrain=$(echo $col | awk '{print $2}')
						    col_type=$(echo $col | awk '{print $3}')
                                        while true; do
                                        read -p "Enter value for $col_name ($col_type): " value
                                        
                                        if [[ $col_constrain == "PK" && -z $value ]]; then
                                            echo "$col_name is a primary key and cannot be null"
                                            continue
                                        fi
                                        
                                        if [[ ("${value:0:1}" != "\"" || "${value: -1}" != "\"") && $col_type == "string" && -n $value ]]; then
                                            echo "Please enter a valid string!"
                                            continue
                                        fi
                                        
                                        if [[ $col_type == "int" && ! $value =~ ^[0-9]+$ && -n $value ]]; then
                                            echo "Please enter a valid integer!"
                                            continue
                                        fi

										if grep -q -E "(^| )$value( |$)" "$table" && [[ $col_constrain == "PK" ]]
                                		then
                                    		echo "Primary key must be unique. Please enter another value"
											continue
										fi
										break
                                    done
                                                                        
                                    values+="$value "
                                done
                                
                                echo "${values% }" >> "$table"
                                echo "Data inserted into $table."
                            else
                                echo "Table $table does not exist."
                            fi
                        fi
                        break
                    done
                done
            else
                echo "$connected is not existing"
            fi
            break
        fi
    done
done